-- Pull in the wezterm API
local wezterm = require 'wezterm'
local act = wezterm.action
-- This will hold the configuration.
local config = wezterm.config_builder()

config.automatically_reload_config = true
config.color_scheme = 'Catppuccin Macchiato'
config.default_prog =  { 'C:\\Program Files\\PowerShell\\7\\pwsh.exe' }
config.window_decorations = "RESIZE"
config.default_cursor_style = "SteadyBlock"
config.window_background_image = 'C:\\Users\\User\\Pictures\\wallpapers\\6676f84559d48d30e34932ad8f5c1a12.jpg' 
config.font = wezterm.font 'FiraCode Nerd Font'
config.adjust_window_size_when_changing_font_size = false
config.font_size = 12.5

config.window_background_image_hsb = {
	-- Darken the background image by reducing it to 1/3rd
  brightness = 0.1,

  -- You can adjust the hue by scaling its value.
  -- a multiplier of 1.0 leaves the value unchanged.
  hue = 1.0,

  -- You can adjust the saturation also.
  saturation = 1.02,
}


-- Directory name in tab title
wezterm.on("format-tab-title", function(tab, tabs, panes, config, hover, max_width)
	local current_dir = (string.gsub(tab.active_pane.current_working_dir.path, "/$", ""))
	local home_dir = "/" .. wezterm.home_dir:gsub("\\", "/")
	return current_dir == home_dir and tab.tab_index + 1 .. ": ~ "
		or tab.tab_index + 1 .. ": " .. string.gsub(current_dir, "(.*[/\\])(.*)", "%2") .. " "
end)

-- Show active workspace in right status
wezterm.on("update-right-status", function(window, pane)
	window:set_right_status(wezterm.format({
		{ Foreground = { Color = "#9b9ea4" } },
		{ Text = window:active_workspace() },
	}))
end)


config.keys = {
	-- Window
	{ key = "Enter", mods = "ALT", action = act.ToggleFullScreen },
	{ key = "m", mods = "ALT", action = act.Hide },
	{ key = ":", mods = "SHIFT|ALT", action = act.ActivateCommandPalette },
	{ key = "r", mods = "ALT", action = act.ReloadConfiguration },
	{ key = "o", mods = "ALT", action = act.ShowDebugOverlay },

	-- Clipboard
	{ key = "c", mods = "SHIFT|CTRL", action = act.CopyTo("Clipboard") },
	{ key = "v", mods = "SHIFT|CTRL", action = act.PasteFrom("Clipboard") },

	-- Panes
	{ key = "v", mods = "ALT", action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }) },
	{ key = "s", mods = "ALT", action = act.SplitVertical({ domain = "CurrentPaneDomain" }) },
	{ key = "q", mods = "ALT", action = act.CloseCurrentPane({ confirm = true }) },

	{ key = "h", mods = "ALT", action = act.ActivatePaneDirection("Left") },
	{ key = "j", mods = "ALT", action = act.ActivatePaneDirection("Down") },
	{ key = "k", mods = "ALT", action = act.ActivatePaneDirection("Up") },
	{ key = "l", mods = "ALT", action = act.ActivatePaneDirection("Right") },
	{ key = "h", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Left", 1 }) },
	{ key = "j", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Down", 1 }) },
	{ key = "k", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Up", 1 }) },
	{ key = "l", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Right", 1 }) },
	{ key = "LeftArrow", mods = "ALT", action = act.ActivatePaneDirection("Left") },
	{ key = "DownArrow", mods = "ALT", action = act.ActivatePaneDirection("Down") },
	{ key = "UpArrow", mods = "ALT", action = act.ActivatePaneDirection("Up") },
	{ key = "RightArrow", mods = "ALT", action = act.ActivatePaneDirection("Right") },
	{ key = "LeftArrow", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Left", 1 }) },
	{ key = "DownArrow", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Down", 1 }) },
	{ key = "UpArrow", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Up", 1 }) },
	{ key = "RightArrow", mods = "SHIFT|CTRL", action = act.AdjustPaneSize({ "Right", 1 }) },
}

return config
